package ceshi.traingame;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * ?????????
 * @author Leslie Leung
 */
public class TrainGame extends JPanel {
	public static final int PLAYER_ME = 0;	//??????
	public static final int PLAYER_COMPUTER = 1;	//?????
	public static final int DEFAULT_PLAYER = PLAYER_ME;		//?????????????????
	public static final int CARD_NUM = 52;		//???????
	public static final int OWN_TIME = 10000;	//??????????????????????
	public static final int INTERVAL = 1000;	//??????meCountDown?????
	/* ????????????????? */
	public static final int[] ARR_SUIT = {Card.SUIT_SPADE, Card.SUIT_HEART, Card.SUIT_DIAMOND, Card.SUIT_CLUB};
	/* ?????????????????? */
	public static final int[] ARR_POINT = {Card.POINT_A, Card.POINT_2, Card.POINT_3, Card.POINT_4, Card.POINT_5,
		Card.POINT_6, Card.POINT_7, Card.POINT_8, Card.POINT_9, Card.POINT_10, Card.POINT_J, Card.POINT_Q, Card.POINT_K};

	/* ????10????????? */
	private static int xCoordinateOfMyCard = 100;	//???????????????
	private static int yCoordinateOfMyCard = 500;	//????????????????
	private static int xCoordinateOfComputerCard = 100;		//??????????????
	private static int yCoordinateOfComputerCard = 50;		//???????????????
	private static int xCoordinateOfTrainCard = 100;	//?????????????
	private static int yCoordinateOfTrainCard = 300;	//??????????????
	private static int xCoordinateOfAllCards = 10;	//??????????????
	private static int yCoordinateOfAllCards = 10;	//???????????????
	private static int offsetBetweenCards = 10;		//??????????????????????
	private static int timeLeftForPlayerMe = 10;	//????????????????

	private List<Card> cards;	//?????????
	private List<Card> train;	//?????
	private Map<Integer, List<Card>> players;	//??????????????????????
	private int turn;	//???????????????????
	private Timer dealTimer;	//??????????????
	private Timer playTimer;	//???????????????????????
	private Timer meCountDown;		//??????????????????
	private boolean oneCardSelected;	//???????????????
	private MouseControl mc;	//??????????????????????

	/**
	 * ??????
	 */
	public TrainGame() {
		setPreferredSize(new Dimension(800, 650));		//?????????????

		/* ????? */
		cards = new LinkedList<Card>();
		train = new LinkedList<Card>();
		players = new HashMap<Integer, List<Card>>();
		turn = DEFAULT_PLAYER;
		dealTimer = new Timer();
		playTimer = new Timer();
		oneCardSelected = false;	//???????????????
		mc = new MouseControl();	//???????????


		/* ??????????? */
		for(int i = 0; i < ARR_SUIT.length; i ++) {
			for(int j = 0; j < ARR_POINT.length; j ++) {
				cards.add(new Card(ARR_POINT[j], ARR_SUIT[i]));
			}
		}

		Collections.shuffle(cards);	//???

		/* ???????????????????????? */
		for(int i = 0; i < cards.size(); i ++) {
			cards.get(i).setX(xCoordinateOfAllCards);
			cards.get(i).setY(yCoordinateOfAllCards);
			yCoordinateOfAllCards += offsetBetweenCards;
		}

		/* ?????????? */
		players.put(PLAYER_ME, Collections.synchronizedList(new LinkedList<Card>()));
		players.put(PLAYER_COMPUTER, Collections.synchronizedList(new LinkedList<Card>()));

		dealTimer.schedule(new DealExecution(), 30, 80);
	}

	/**
	 * ??????????????????
	 * @author Leslie Leung
	 */
	private class MouseControl extends MouseAdapter {
		@Override
		public void mousePressed(MouseEvent e) {
			int x = e.getX();
			int y = e.getY();

			if(e.getButton() == MouseEvent.BUTTON1) {//?????????????
				findTrainCardByXYAndSetSelected(x, y);	//???????????¨°?????????????
			}

			if(e.getClickCount() == 2) {//???????????????????

				List<Card> playerCardsList = getPlayerCards(PLAYER_ME);		//?????????????????
				Card targetCard = playerCardsList.get(0);	//??????????????????????

				/* ?????????????????????? */
				if(playerCardsList.size() > 1 && x > targetCard.getX() && x < targetCard.getX() + offsetBetweenCards &&
						y > targetCard.getY() && y < targetCard.getY() + Card.CARD_HEIGHT) {

					play(PLAYER_ME);	//???????????

					/* ?????????????????????playTimer?????????????????????????playerTimer */
					playTimer.cancel();
					turn = PLAYER_COMPUTER;
					playTimer = new Timer();
					playTimer.schedule(new PlayExecution(), 0, OWN_TIME);				
				} 
				/* ?????????????????????????? */
				else if(playerCardsList.size() == 1 && x > targetCard.getX() && x < targetCard.getX() + Card.CARD_WIDTH &&
						y > targetCard.getY() && y < targetCard.getY() + Card.CARD_HEIGHT) {

					play(PLAYER_ME);	//???????????

					/* ?????????????????????playTimer?????????????????????????playerTimer */
					playTimer.cancel();
					turn = PLAYER_COMPUTER;
					playTimer = new Timer();
				}
			}

			repaint();
		}
	}

	/**
	 * ????????????????????????????????¨°?????????????
	 * @param x ??????????????
	 * @param y ???????????????
	 */
	public void findTrainCardByXYAndSetSelected(int x, int y) {
		for(int i = 0; i < train.size(); i ++) {
			/* ????????????????????????????????? */
			if(i < train.size() - 1 && x > getTrainCard(i).getX() && x < getTrainCard(i).getX() + offsetBetweenCards &&
					y > getTrainCard(i).getY() && y < getTrainCard(i).getY() + Card.CARD_HEIGHT) {

				setTrainCardSelected(i);
				break;
			} 
			/* ???????????????????? */
			else if(i == train.size() - 1 && x > getTrainCard(i).getX() && x < getTrainCard(i).getX() + Card.CARD_WIDTH &&
					y > getTrainCard(i).getY() && y < getTrainCard(i).getY() + Card.CARD_HEIGHT){

				setTrainCardSelected(i);
				break;
			}
		}

	}

	/**
	 * ????????????????????????????
	 * @param i ????????????¡À?
	 */
	public void setTrainCardSelected(int i) {
		if(!getTrainCard(i).isSelected() && !oneCardSelected) {
			getTrainCard(i).setSelected(true);
			oneCardSelected = true;
		} else if(getTrainCard(i).isSelected() && oneCardSelected) {
			getTrainCard(i).setSelected(false);
			oneCardSelected = false;
		}
	}

	/**
	 * ??????????????
	 * @param i ????????¡À?
	 * @return ??????
	 */
	public Card getTrainCard(int i) {
		return train.get(i);
	}

	/**
	 * ??????????????????
	 * @author Leslie Leung
	 */
	private class PlayExecution extends TimerTask {	
		@Override
		public void run() {
			// TODO Auto-generated method stub
			if(turn == PLAYER_ME) {//???????????????

				meCountDown = new Timer();	//?????meCountDown			
				timeLeftForPlayerMe = 10;	//??????????????????????			
				addMouseListener(mc);		//?????????
				
				meCountDown.schedule(new TimerTask() {
					@Override
					public void run() {
						// TODO Auto-generated method stub
						if(timeLeftForPlayerMe > 0 && timeLeftForPlayerMe <= 10) {
							repaint();
							timeLeftForPlayerMe --;	//?????

							if(timeLeftForPlayerMe == 0) {
								play(PLAYER_ME);	//???????????????????0??????????
								turn = PLAYER_COMPUTER;		//????????????????							
							}

						}
					}
				}, 0, INTERVAL);

			} else if(turn == PLAYER_COMPUTER) {//?????????????

				meCountDown.cancel();
				removeMouseListener(mc);	//?????????

				autoFindTrainCardAndSetSelected();	//???????????????????????????????????????????
				play(PLAYER_COMPUTER);	//??????????
				repaint();
				
				/* ???????????0????????????????? */
				if(getPlayerCards(PLAYER_COMPUTER).size() > 0) {
					/* ????????????????????playTimer?????????????????????????????playTimer */
					playTimer.cancel();
					turn = PLAYER_ME;		//?????????????????
					playTimer = new Timer();
					playTimer.schedule(new PlayExecution(), 0, OWN_TIME);
				}
						
			}

		}
	}

	/**
	 * ??????????????????
	 * @author Leslie Leung
	 */
	private class DealExecution extends TimerTask {
		@Override
		public void run() {
			// TODO Auto-generated method stub
			if(cards.size() == 0) {

				dealTimer.cancel();		//??????????????????????????
				turn = PLAYER_ME;	//???????????????????
				playTimer.schedule(new PlayExecution(), 0, OWN_TIME);	//??????????

			} else {
				startDealing();		//???????
			}
			repaint();
		}			
	}

	/**
	 * ??????????????????????????????????????????????????
	 */
	public void autoFindTrainCardAndSetSelected() {
		for(int i = 0; i < train.size(); i ++) {
			/* ???????????????????????????????????????????????????????????? */
			if(getTrainCard(i).getPoint() == getPlayerCards(PLAYER_COMPUTER).get(0).getPoint()) {
				getTrainCard(i).setSelected(true);
			}
		}
	}

	/**
	 * ?????????????¡Â?????????
	 */
	public void startDealing() {
		if(turn == PLAYER_ME) {//????????????

			Card c = cards.remove(cards.size() - 1);//?????????????????
			setXOfMyCards(c);   //???????????????????
			setYOfMyCards(c);   //????????????????????

			deal(turn, c);		//????
			turn = PLAYER_COMPUTER;		//?????????????

		} else if(turn == PLAYER_COMPUTER) {//???????????

			Card c = cards.remove(cards.size() - 1);//?????????????????
			setXOfComputerCards(c);		//??????????????????
			setYOfComputerCards(c);		//???????????????????

			deal(turn, c);		//????
			turn = PLAYER_ME;	//??????????????
		}
	}

	/**
	 * ???????????????????
	 * @param card ??????????????
	 */
	public void setXOfMyCards(Card card) {
		card.setX(xCoordinateOfMyCard);	
		xCoordinateOfMyCard += offsetBetweenCards;
	}

	/**
	 * ????????????????????
	 * @param card ??????????????
	 */
	public void setYOfMyCards(Card card) {
		card.setY(yCoordinateOfMyCard);
	}

	/**
	 * ??????????????????
	 * @param card ????????????
	 */
	public void setXOfComputerCards(Card card) {
		card.setX(xCoordinateOfComputerCard);
		xCoordinateOfComputerCard += offsetBetweenCards;
	}

	/**
	 * ???????????????????
	 * @param card ????????????
	 */
	public void setYOfComputerCards(Card card) {
		card.setY(yCoordinateOfComputerCard);
	}

	/**
	 * ??????????????
	 * @param card ???????????
	 */
	public void setXOfTrainCard(Card card) {
		card.setX(xCoordinateOfTrainCard);	
		xCoordinateOfTrainCard += offsetBetweenCards;
	}

	/**
	 * ???????????????
	 * @param card ???????????
	 */
	public void setYOfTrainCard(Card card) {
		card.setY(yCoordinateOfTrainCard);
	}

	/**
	 * ??????
	 * @param player ????????
	 * @param card ????????????
	 */
	public void deal(int player, Card card) {
		getPlayerCards(player).add(card);	//??????????????????
		card.setFace(true);		//?????????????
	}

	/**
	 * ?????????????????
	 * @param player ???
	 */
	public void play(int player) {
		List<Card> playerCards = getPlayerCards(player);

		Card card = playerCards.remove(0);	//??????????????????????
		train.add(card);	//?????????????
		setXOfTrainCard(card);	//??????????????
		setYOfTrainCard(card);	//???????????????

		resetXOfPlayerCard(player);		//?????????????????
		/* ???? */
		for(int i = 0; i < train.size(); i ++) {
			if(getTrainCard(i).isSelected()) {//????????????????
				getTrainCard(i).setSelected(false);		//??????
				oneCardSelected = false;	//??????????????

				/* ????????????????????????????????????? */
				if(getTrainCard(i).getPoint() == card.getPoint()) {
					reap(player, getTrainCard(i), i);
				}
				break;
			}
		}

		/* ?????????????????0?????? */
		if(getPlayerCards(player).size() == 0) {
			if(player == PLAYER_COMPUTER) {//????????????
				JOptionPane.showMessageDialog(null, "??????????");

				removeMouseListener(mc);
				playTimer.cancel();
				meCountDown.cancel();
			} else if(player == PLAYER_ME) {//????????????????
				JOptionPane.showMessageDialog(null, "??????");

				removeMouseListener(mc);
				playTimer.cancel();
				meCountDown.cancel();
			}
		}

	}

	/**
	 * ???????????????????
	 * @param player
	 */
	public void resetXOfPlayerCard(int player) {
		List<Card> resetCards = getPlayerCards(player);

		if(player == PLAYER_ME) {//???????????
			xCoordinateOfMyCard = 100;

			for(int i = 0; i < resetCards.size(); i ++) {//???????????????????????
				setXOfMyCards(resetCards.get(i));	
			}

		} else if(player == PLAYER_COMPUTER) {//??????????
			xCoordinateOfComputerCard = 100;

			for(int i = 0; i < resetCards.size(); i ++) {//??????????????????????
				setXOfComputerCards(resetCards.get(i));	
			}
		}
	}

	/**
	 * ?????????????????
	 * @param player ???????????
	 * @return ?????????????
	 */
	public List<Card> getPlayerCards(int player) {
		return players.get(player);
	}

	/**
	 * ??????
	 * @param player ???
	 * @param card ??????????
	 * @param i ????????????????¡À?
	 */
	public void reap(int player, Card card, int i) {
		List<Card> subList = train.subList(i, train.size());	//????????????????????????????

		/* ???????????????? */
		for(int j = 0; j < subList.size(); j ++) {
			xCoordinateOfTrainCard -= offsetBetweenCards;
		}

		oneCardSelected = false;	//??????????????
		addToPlayer(player, subList);	//??????????????
		subList.clear();	//????????????????????
	}

	/**
	 * ??????????????????
	 * @param player ???
	 * @param cards ???????????
	 */
	public void addToPlayer(int player, List<Card> cards) {
		getPlayerCards(player).addAll(cards);	//?????????????

		if(player == PLAYER_ME) {//???????????

			for(int i = 0; i < cards.size(); i ++) {//????????????????????????????????
				setXOfMyCards(cards.get(i));
				setYOfMyCards(cards.get(i));
			}

		} else if(player == PLAYER_COMPUTER) {//??????????

			for(int i = 0; i < cards.size(); i ++) {//????????????????????????????????
				setXOfComputerCards(cards.get(i));
				setYOfComputerCards(cards.get(i));
			}

		}
	}

	@Override
	public void paint(Graphics g) {
		g.setColor(Color.BLACK);
		g.fillRect(0, 0, getBounds().width, getBounds().height);

		/* ??????????? */
		for(int i = 0; i < cards.size(); i++) {
			cards.get(i).paintCard(g);			
		}

		/* ??????????????? */
		for(int i = 0; i < getPlayerCards(PLAYER_ME).size(); i ++) {
			getPlayerCards(PLAYER_ME).get(i).paintCard(g);
		}

		/* ????????????? */
		for(int i = 0; i < getPlayerCards(PLAYER_COMPUTER).size(); i ++) {
			getPlayerCards(PLAYER_COMPUTER).get(i).paintCard(g);
		}

		/* ????? */
		for(int i = 0; i < train.size(); i ++) {
			getTrainCard(i).paintCard(g);
		}

		/* ???????? */
		g.setColor(Color.BLUE);
		g.setFont(new Font("Serif",Font.BOLD|Font.ITALIC,24));
		g.drawString(timeLeftForPlayerMe + "", 400, 400);
	}	
}
